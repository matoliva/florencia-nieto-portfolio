---
import type { ImageGallery } from '../models/interfaces';

interface Props {
  imageGallery: ImageGallery[];
}

const { imageGallery } = Astro.props;
---

<div class='gallery-wrapper'>
  <div class='gallery'>
    <div class='masonry-grid'>
      {
        imageGallery.map((img, index) => (
          <div class='masonry-grid-item'>
            <img
              src={img.src}
              alt={img.alt}
              width={img.width}
              height={img.height}
              class='gallery-img'
              data-index={index}
            />
          </div>
        ))
      }
    </div>
  </div>

  <div class='lightbox'>
    <button class='close' aria-label='Close lightbox'></button>
    <div class='lightbox-content-wrapper'>
      <span class='nav-btn prev' aria-label='Previous image'>&#10094;</span>
      <img class='lightbox-content' alt='Lightbox image' />
      <span class='nav-btn next' aria-label='Next image'>&#10095;</span>
    </div>
    <div class='caption'></div>
  </div>
</div>

<style>
  .gallery {
    padding: 16px;
  }
  .masonry-grid {
    column-count: 4;
    column-gap: 16px;
  }
  .masonry-grid-item {
    width: 100%;
    margin-bottom: 16px;
  }
  .gallery-img {
    width: 100%;
    height: auto;
    display: block;
    cursor: pointer;
    filter: grayscale(0); /* No grayscale by default */
    transition: filter 0.5s ease; /* Smooth transition for grayscale effect */
  }

  /* On hover, apply grayscale effect */
  .gallery-img:hover {
    filter: grayscale(100%);
  }

  .lightbox {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    background-color: rgba(0, 0, 0, 0.9);
  }
  .lightbox-content-wrapper {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .lightbox-content {
    max-width: 90%;
    max-height: 90%;
    object-fit: contain;
  }
  .close {
    background: none;
    border: none;
    position: absolute;
    top: 114px;
    right: 36px;
    width: 30px;
    height: 30px;
    cursor: pointer;
    z-index: 1001;
  }
  .close::before,
  .close::after {
    content: '';
    position: absolute;
    width: 100%;
    height: 2px;
    background-color: #f1f1f1;
    top: 50%;
  }
  .close::before {
    transform: rotate(45deg);
  }
  .close::after {
    transform: rotate(-45deg);
  }
  .nav-btn {
    color: #f1f1f1;
    font-size: 30px;
    font-weight: bold;
    cursor: pointer;
    user-select: none;
    background-color: rgba(0, 0, 0, 0.3);
    padding: 10px;
    z-index: 1001;
  }
  .prev {
    position: absolute;
    left: 15px;
  }
  .next {
    position: absolute;
    right: 15px;
  }
  .caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    text-align: center;
    color: #ccc;
    padding: 15px;
    background-color: rgba(0, 0, 0, 0.5);
  }

  @media (max-width: 1200px) {
    .masonry-grid {
      column-count: 3;
    }
  }

  @media (max-width: 900px) {
    .masonry-grid {
      column-count: 2;
    }
  }

  @media (max-width: 600px) {
    .masonry-grid {
      column-count: 1;
    }
    .nav-btn {
      font-size: 24px;
      padding: 8px;
    }
    .close {
      width: 24px;
      height: 24px;
      top: 124px;
      right: 15px;
    }
    .close::before,
    .close::after {
      height: 1.5px;
    }
    .caption {
      padding: 10px;
      font-size: 14px;
    }
  }
</style>

<script>
  class Gallery {
    private container: HTMLElement;
    private galleryImages: HTMLImageElement[];
    private lightbox: HTMLElement;
    private lightboxImg: HTMLImageElement;
    private caption: HTMLElement;
    private closeBtn: HTMLElement;
    private prevBtn: HTMLElement;
    private nextBtn: HTMLElement;
    private currentIndex: number = 0;

    constructor(container: HTMLElement) {
      this.container = container;

      // Find all elements
      this.galleryImages = Array.from(this.container.querySelectorAll('.gallery-img'));
      this.lightbox = this.container.querySelector('.lightbox') as HTMLElement;
      this.lightboxImg = this.lightbox.querySelector('.lightbox-content') as HTMLImageElement;
      this.caption = this.lightbox.querySelector('.caption') as HTMLElement;
      this.closeBtn = this.lightbox.querySelector('.close') as HTMLElement;
      this.prevBtn = this.lightbox.querySelector('.prev') as HTMLElement;
      this.nextBtn = this.lightbox.querySelector('.next') as HTMLElement;

      this.initializeEventListeners();
    }

    private showImage(index: number): void {
      if (index >= 0 && index < this.galleryImages.length) {
        this.currentIndex = index;
        const img = this.galleryImages[this.currentIndex];
        this.lightboxImg.src = img.src;
        this.lightboxImg.alt = img.alt;
        this.caption.textContent = img.alt;
      }
    }

    private initializeEventListeners(): void {
      // Gallery click event
      this.container.querySelector('.masonry-grid')?.addEventListener('click', e => {
        const target = e.target as HTMLElement;
        if (target.classList.contains('gallery-img')) {
          this.lightbox.style.display = 'flex';
          const img = target as HTMLImageElement;
          const index = parseInt(img.dataset.index || '0');
          this.showImage(index);
        }
      });

      // Close button event
      this.closeBtn.addEventListener('click', () => {
        this.lightbox.style.display = 'none';
      });

      // Click outside to close
      this.lightbox.addEventListener('click', e => {
        if (e.target === this.lightbox) {
          this.lightbox.style.display = 'none';
        }
      });

      // Navigation buttons
      this.prevBtn.addEventListener('click', () => {
        this.showImage(this.currentIndex - 1);
      });

      this.nextBtn.addEventListener('click', () => {
        this.showImage(this.currentIndex + 1);
      });

      // Keyboard navigation
      document.addEventListener('keydown', e => {
        if (this.lightbox.style.display === 'flex') {
          switch (e.key) {
            case 'Escape':
              this.lightbox.style.display = 'none';
              break;
            case 'ArrowLeft':
              this.showImage(this.currentIndex - 1);
              break;
            case 'ArrowRight':
              this.showImage(this.currentIndex + 1);
              break;
          }
        }
      });
    }
  }

  // Initialize all galleries on the page
  document.addEventListener('DOMContentLoaded', () => {
    const galleryContainers = document.querySelectorAll('.gallery-wrapper');
    galleryContainers.forEach(container => {
      if (container instanceof HTMLElement) {
        new Gallery(container);
      }
    });
  });
</script>
